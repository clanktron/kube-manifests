---
apiVersion: v1
kind: Namespace
metadata:
  name: flame
  # annotations:
  #   linkerd.io/inject: enabled

---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: flame-tls
  namespace: flame
spec:
  secretName: flame-tls
  privateKey:
    rotationPolicy: Always 
  dnsNames:
    - dash.claytonc.dev
  issuerRef:
    name: letsencrypt
    kind: ClusterIssuer
    group: cert-manager.io

---
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  name: flame
  namespace: flame
  annotations:
    kubernetes.io/ingress.class: traefik-crd-external
spec:
  entryPoints:
    - web
    - websecure
  routes:
  - match: Host(`dash.claytonc.dev`)
    kind: Rule
    services:
    - name: flame
      port: 80
  tls:
    secretName: flame-tls

---
apiVersion: v1
kind: Secret
metadata:
  name: flame-secret
  namespace: flame
data:
  PASSWORD: azgzZmRuc2p0a2V3K28w



---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: flame
  namespace: flame
spec:
  selector:
    matchLabels:
      app: flame
  template:
    metadata:
      labels:
        app: flame
    spec:
      serviceAccountName: flame
      securityContext:
        fsGroup: 1000
      containers:
        - name: flame
          image: pawelmalak/flame
          resources:
            requests:
              memory: "64Mi"
              cpu: "250m"
            limits:
              memory: "128Mi"
              cpu: "500m"
          ports:
            - name: http
              containerPort: 5005
              protocol: TCP
          readinessProbe:
            httpGet:
              path: /
              port: http
          env:
          - name: PASSWORD
            valueFrom:
              secretKeyRef:
                name: flame-secret
                key: PASSWORD
                optional: false
          volumeMounts:
          - mountPath: "/app/data"
            name: flame-data
      volumes:
        - name: flame-data
          persistentVolumeClaim:
            claimName: flame-data

---
apiVersion: v1
kind: Service
metadata:
  name: flame
  namespace: flame
spec:
  selector:
    app: flame
  ports:
    - protocol: TCP
      port: 80
      targetPort: 5005

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: flame-data
  namespace: flame
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 10Gi


---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: flame
  namespace: flame
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: flame
  namespace: flame
rules:
- apiGroups: ["networking.k8s.io"]
  resources: ["ingresses"]
  verbs: ["get", "list", "watch"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: flame
  namespace: flame
subjects:
- kind: ServiceAccount
  name: flame
  namespace: flame
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: flame
